1. Program to display the current date and time in Java:  

```java
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  

public class CurrentDateTime {  
    public static void main(String[] args) {  
        LocalDateTime now = LocalDateTime.now();  
        System.out.println("Current Date and Time: " + now);  
    }  
}
```

This program uses the `LocalDateTime` class from the `java.time` package to get and display the current date and time.

2. Program to convert a date to a string in the format "MM/dd/yyyy":  


import java.time.LocalDate;  
import java.time.format.DateTimeFormatter;  

public class DateToString {  
    public static void main(String[] args) {  
        LocalDate date = LocalDate.now();  
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");  
        String formattedDate = date.format(formatter);  
        System.out.println("Formatted Date: " + formattedDate);  
    }  
}
```

This program formats the current date using the `DateTimeFormatter` class to display it in the specified format.

3. The difference between collections and streams in Java:  

Collections are data structures that store and manipulate a group of objects, whereas Streams in Java are used for processing collections of data in a functional and parallelizable manner. Collections store elements in memory and allow modification, while Streams do not store data but instead perform operations on data in a pipeline.  

Example:

```java
import java.util.*;  
import java.util.stream.*;  

public class CollectionsVsStreams {  
    public static void main(String[] args) {  
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");  

        // Using Collection
        for (String name : names) {  
            System.out.println(name.toUpperCase());  
        }  

        // Using Streams
        names.stream().map(String::toUpperCase).forEach(System.out::println);  
    }  
}
```

In this example, the collection `List` stores names, and the traditional for-each loop is used to iterate over it. On the other hand, the Stream API processes elements using the `map` function to convert names to uppercase.

4. Enums in Java:  

Enums are special data types used to define a fixed set of constants. They improve code readability and prevent invalid values from being assigned.

Example:


enum Day {  
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY;  
}  

public class EnumExample {  
    public static void main(String[] args) {  
        Day today = Day.WEDNESDAY;  
        System.out.println("Today is: " + today);  
    }  
}
```

Here, the `Day` enum defines a set of predefined constants representing the days of the week. The `today` variable is assigned `Day.WEDNESDAY`.

5. Built-in annotations in Java:  

Java provides several built-in annotations that are used for different purposes in coding, mainly for metadata, compiler checks, and runtime processing. Some commonly used built-in annotations are:  

- `@Override`: Indicates that a method overrides a method in a superclass.  
- `@Deprecated`: Marks a method or class as outdated and discourages its use.  
- `@SuppressWarnings`: Instructs the compiler to ignore specific warnings.  
- `@FunctionalInterface`: Ensures an interface contains exactly one abstract method.  
- `@SafeVarargs`: Suppresses warnings about unsafe operations on generics.  

Example:


class Parent {  
    void show() {  
        System.out.println("Parent class method");  
    }  
}  

class Child extends Parent {  
    @Override  
    void show() {  
        System.out.println("Child class method");  
    }  
}  

public class AnnotationExample {  
    public static void main(String[] args) {  
        Parent obj = new Child();  
        obj.show();  
    }  
}
```

In this example, the `@Override` annotation ensures that the `show` method in the `Child` class correctly overrides the method in the `Parent` class.